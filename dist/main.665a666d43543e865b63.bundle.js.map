{"version":3,"file":"main.665a666d43543e865b63.bundle.js","mappings":"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","sources":["webpack://studywebapplication/./src/main.js"],"sourcesContent":["// import axios from 'axios';\r\n\r\nfetch(\"https://api.tvmaze.com/shows\").then((response) =>\r\n  response.json().then((response2) => console.log(response2))\r\n);\r\n\r\nconst app = Vue.createApp({\r\n  data() {\r\n    return {\r\n      topTenShows: [],\r\n      allShows: [], // Nowa tablica dla wszystkich filmów\r\n      originalAllShows: [], // Oryginalne dane wszystkich filmów\r\n      currentPage: 1, // Numer aktualnie wyświetlanej strony\r\n      pageSize: 12, // Liczba filmów wyświetlanych na jednej stronie\r\n      favorites: [], // Tablica ulubionych seriali przechowywana w localStorage\r\n      searchQuery: \"\",\r\n      selectedCategory: \"All\", // Wybrana kategoria\r\n      filteredAllShows: [], // Tablica dla filtrowanych filmów\r\n      originalGenres: [], // Dodajemy właściwość przechowującą oryginalną listę kategorii filmów\r\n      displayedGenres: [], // Lista wyświetlanych kategorii filmów\r\n      showDetails: null, // Dodajemy właściwość do przechowywania szczegółowych informacji o wybranym show\r\n      // reszta danych pozostaje bez zmian\r\n    showCast: [], // Dodajemy pole przechowujące informacje o obsadzie\r\n    };\r\n  },\r\n  // Obliczenia związane z danymi\r\n  computed: {\r\n    // Metoda zwracająca podzbior seriali na aktualnie wyświetlanej stronie\r\n    paginatedShows() {\r\n      const startIndex = (this.currentPage - 1) * this.pageSize;\r\n      return this.filteredShows.slice(startIndex, startIndex + this.pageSize);\r\n    },\r\n    // Metoda zwracająca liczbę wszystkich stron\r\n    totalPages() {\r\n      return Math.ceil(this.filteredShows.length / this.pageSize);\r\n    },\r\n    filteredShows() {\r\n      let filtered = this.originalAllShows;\r\n      if (this.selectedCategory !== \"All\") {\r\n        filtered = filtered.filter((show) =>\r\n          show.genres.includes(this.selectedCategory)\r\n        );\r\n      }\r\n      if (this.searchQuery) {\r\n        const regex = new RegExp(this.searchQuery.toLowerCase(), \"i\");\r\n        filtered = filtered.filter((show) =>\r\n          regex.test(show.name.toLowerCase())\r\n        );\r\n      }\r\n      return filtered;\r\n    },\r\n    genres() {\r\n      const genresSet = new Set();\r\n      this.allShows.forEach((show) => {\r\n        show.genres.forEach((genre) => genresSet.add(genre));\r\n      });\r\n      return Array.from(genresSet);\r\n    },\r\n  },\r\n  created() {\r\n    this.fetchTopTenShows();\r\n    this.fetchAllShows();\r\n    const favoritesFromStorage = localStorage.getItem(\"favorites\");\r\n    if (favoritesFromStorage) {\r\n      this.favorites = JSON.parse(favoritesFromStorage);\r\n    }\r\n    this.originalGenres = this.genres.slice();\r\n    this.displayedGenres = ['All', ...this.originalGenres];\r\n  },\r\n  methods: {\r\n    fetchTopTenShows() {\r\n      axios\r\n        .get(\"https://api.tvmaze.com/shows\")\r\n        .then((response) => {\r\n          const topTenShows = response.data\r\n            .filter((show) => show.rating && show.rating.average)\r\n            .sort((a, b) => b.rating.average - a.rating.average)\r\n            .slice(0, 9);\r\n          this.topTenShows = topTenShows;\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching top ten shows:\", error);\r\n        });\r\n    },\r\n    fetchAllShows() {\r\n      axios\r\n        .get(\"https://api.tvmaze.com/shows\")\r\n        .then((response) => {\r\n          this.allShows = response.data;\r\n          this.originalAllShows = response.data;\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching all shows:\", error);\r\n        });\r\n    },\r\n    searchShows() {\r\n      // Implementacja filtrowania filmów na podstawie frazy wyszukiwania\r\n      // Zakomentuję, ponieważ filtracja odbywa się w computed property filteredShows\r\n    },\r\n    addToFavorites(show) {\r\n      // Sprawdzenie czy dany film już istnieje w ulubionych\r\n      const exists = this.favorites.some(favorite => favorite.id === show.id);\r\n      if (!exists) {\r\n        // Dodanie filmu do ulubionych\r\n        this.favorites.push(show);\r\n        // Zapisanie ulubionych w localStorage\r\n        localStorage.setItem(\"favorites\", JSON.stringify(this.favorites));\r\n        // Zaktualizowanie licznika na serduszku\r\n    const countElement = document.querySelector(\".count span\");\r\n    if (countElement) {\r\n      countElement.textContent = parseInt(countElement.textContent || 0) + 1;\r\n        }\r\n        // Dodanie animacji do ikony serduszka\r\n    const heartIcon = document.querySelector(\".fa-heart\");\r\n    if (heartIcon) {\r\n      heartIcon.classList.add(\"animate__animated\", \"animate__heartBeat\");\r\n      setTimeout(() => {\r\n        heartIcon.classList.remove(\"animate__animated\", \"animate__heartBeat\");\r\n      }, 1000); // Usunięcie animacji po 1 sekundzie\r\n    }\r\n      }\r\n    },\r\n    // Dodajemy metodę do usuwania filmów z ulubionych\r\n    removeFromFavorites(showId) {\r\n      this.favorites = this.favorites.filter(show => show.id !== showId);\r\n      localStorage.setItem(\"favorites\", JSON.stringify(this.favorites));\r\n    },\r\n    filterFilms(category) {\r\n      this.selectedCategory = category;\r\n      this.displayedGenres =\r\n        category === \"All\" ? this.originalGenres : [category];\r\n    },\r\n    resetCategory() {\r\n      this.selectedCategory = 'All';\r\n      this.displayedGenres = ['All', ...this.originalGenres];\r\n    },\r\n    // Metoda do pobierania szczegółowych informacji o wybranym show\r\n    fetchShowDetails(showId) {\r\n      axios\r\n        .get(`https://api.tvmaze.com/shows/${showId}`)\r\n        .then((response) => {\r\n          // Wyświetlanie szczegółowych informacji w modalu\r\n          this.showDetailsModal(response.data);\r\n          this.fetchShowCast(showId); // Dodajemy pobieranie informacji o obsadzie\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching show details:\", error);\r\n        });\r\n    },\r\n    // Metoda wyświetlająca modal z danymi o show\r\n    showDetailsModal(showData) {\r\n      // Ustawianie danych showDetails, które wykorzystamy do wyświetlenia w modalu\r\n      this.showDetails = showData;\r\n      // Pokazanie modala\r\n      $(\"#showDetailsModal\").modal(\"show\");\r\n    },\r\n    fetchShowCast(showId) {\r\n      axios\r\n        .get(`https://api.tvmaze.com/shows/${showId}/cast`)\r\n        .then((response) => {\r\n          this.showCast = response.data;\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching show cast:\", error);\r\n        });\r\n    },\r\n  },\r\n});\r\n\r\napp.mount(\"#app\");\r\n\r\n// zaczynam modyfikacje\r\n\r\n// TOGGLE LOGIN BUTTON\r\ndocument\r\n  .getElementById(\"toggleLoginBtn\")\r\n  .addEventListener(\"click\", function () {\r\n    // Przełączanie klasy show na kontenerze formularza logowania\r\n    document.getElementById(\"loginContainer\").classList.toggle(\"show\");\r\n  });\r\n"],"names":["fetch","then","response","json","response2","console","log","app","Vue","createApp","data","topTenShows","allShows","originalAllShows","currentPage","pageSize","favorites","searchQuery","selectedCategory","filteredAllShows","originalGenres","displayedGenres","showDetails","showCast","computed","paginatedShows","startIndex","filteredShows","slice","totalPages","Math","ceil","length","_this","filtered","filter","show","genres","includes","regex","RegExp","toLowerCase","test","name","genresSet","Set","forEach","genre","add","Array","from","created","fetchTopTenShows","fetchAllShows","favoritesFromStorage","localStorage","getItem","JSON","parse","concat","_toConsumableArray","methods","_this2","axios","get","rating","average","sort","a","b","error","_this3","searchShows","addToFavorites","exists","some","favorite","id","push","setItem","stringify","countElement","document","querySelector","textContent","parseInt","heartIcon","classList","setTimeout","remove","removeFromFavorites","showId","filterFilms","category","resetCategory","fetchShowDetails","_this4","showDetailsModal","fetchShowCast","showData","$","modal","_this5","mount","getElementById","addEventListener","toggle"],"sourceRoot":""}