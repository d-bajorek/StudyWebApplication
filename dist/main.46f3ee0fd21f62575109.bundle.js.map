{"version":3,"file":"main.46f3ee0fd21f62575109.bundle.js","mappings":"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","sources":["webpack://studywebapplication/./src/main.js"],"sourcesContent":["\r\n// import axios from 'axios';\r\n\r\nfetch(\"https://api.tvmaze.com/shows\").then((response) =>\r\n  response.json().then((response2) => console.log(response2))\r\n);\r\n\r\nconst app = Vue.createApp({\r\n  data() {\r\n    return {\r\n      topTenShows: [],\r\n      allShows: [], // Nowa tablica dla wszystkich filmów\r\n      originalAllShows: [], // Oryginalne dane wszystkich filmów\r\n      currentPage: 1, // Numer aktualnie wyświetlanej strony\r\n      pageSize: 12, // Liczba filmów wyświetlanych na jednej stronie\r\n      favorites: [], // Tablica ulubionych seriali przechowywana w localStorage\r\n      cart: [], // Tablica seriali dodanych do koszyka przechowywana w localStorage\r\n      searchQuery: \"\",\r\n      selectedCategory: \"All\", // Wybrana kategoria\r\n      filteredAllShows: [], // Tablica dla filtrowanych filmów\r\n      originalGenres: [], // Dodajemy właściwość przechowującą oryginalną listę kategorii filmów\r\n      displayedGenres: [], // Lista wyświetlanych kategorii filmów\r\n      showDetails: null, // Dodajemy właściwość do przechowywania szczegółowych informacji o wybranym show\r\n      // reszta danych pozostaje bez zmian\r\n      showCast: [], // Dodajemy pole przechowujące informacje o obsadzie\r\n    };\r\n  },\r\n  // Obliczenia związane z danymi\r\n  computed: {\r\n    // Metoda zwracająca podzbior seriali na aktualnie wyświetlanej stronie\r\n    paginatedShows() {\r\n      const startIndex = (this.currentPage - 1) * this.pageSize;\r\n      return this.filteredShows.slice(startIndex, startIndex + this.pageSize);\r\n    },\r\n    // Metoda zwracająca liczbę wszystkich stron\r\n    totalPages() {\r\n      return Math.ceil(this.filteredShows.length / this.pageSize);\r\n    },\r\n    filteredShows() {\r\n      let filtered = this.originalAllShows;\r\n      if (this.selectedCategory !== \"All\") {\r\n        filtered = filtered.filter((show) =>\r\n          show.genres.includes(this.selectedCategory)\r\n        );\r\n      }\r\n      if (this.searchQuery) {\r\n        const regex = new RegExp(this.searchQuery.toLowerCase(), \"i\");\r\n        filtered = filtered.filter((show) =>\r\n          regex.test(show.name.toLowerCase())\r\n        );\r\n      }\r\n      return filtered;\r\n    },\r\n    genres() {\r\n      const genresSet = new Set();\r\n      this.allShows.forEach((show) => {\r\n        show.genres.forEach((genre) => genresSet.add(genre));\r\n      });\r\n      return Array.from(genresSet);\r\n    },\r\n    totalPrice() {\r\n      // Sprawdzenie, czy wszystkie filmy w koszyku posiadają właściwość price\r\n      const hasPrice = this.cart.every(\r\n        (item) => item.hasOwnProperty(\"price\") && !isNaN(item.price)\r\n      );\r\n\r\n      if (!hasPrice) {\r\n        console.error(\"Some items in the cart do not have a valid price.\");\r\n        return \"N/A\";\r\n      }\r\n\r\n      // Obliczanie całkowitej ceny na podstawie sumy cen filmów w koszyku\r\n      const total = this.cart.reduce(\r\n        (total, item) => total + parseFloat(item.price),\r\n        0\r\n      );\r\n      return total.toFixed(2);\r\n    },\r\n  },\r\n  created() {\r\n    this.fetchTopTenShows();\r\n    this.fetchAllShows();\r\n    const favoritesFromStorage = localStorage.getItem(\"favorites\");\r\n    if (favoritesFromStorage) {\r\n      this.favorites = JSON.parse(favoritesFromStorage);\r\n    }\r\n    const cartFromStorage = localStorage.getItem(\"cart\");\r\n    if (cartFromStorage) {\r\n      this.cart = JSON.parse(cartFromStorage);\r\n    }\r\n    this.originalGenres = this.genres.slice();\r\n    this.displayedGenres = [\"All\", ...this.originalGenres];\r\n  },\r\n  methods: {\r\n    fetchTopTenShows() {\r\n      axios\r\n        .get(\"https://api.tvmaze.com/shows\")\r\n        .then((response) => {\r\n          const topTenShows = response.data\r\n            .filter((show) => show.rating && show.rating.average)\r\n            .sort((a, b) => b.rating.average - a.rating.average)\r\n            .slice(0, 10);\r\n          this.topTenShows = topTenShows;\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching top ten shows:\", error);\r\n        });\r\n    },\r\n    fetchAllShows() {\r\n      axios\r\n        .get(\"https://api.tvmaze.com/shows\")\r\n        .then((response) => {\r\n          this.allShows = response.data;\r\n          this.originalAllShows = response.data;\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching all shows:\", error);\r\n        });\r\n    },\r\n    searchShows() {\r\n      // Implementacja filtrowania filmów na podstawie frazy wyszukiwania\r\n      // Zakomentuję, ponieważ filtracja odbywa się w computed property filteredShows\r\n    },\r\n    addToFavorites(show) {\r\n      // Sprawdzenie czy dany film już istnieje w ulubionych\r\n      const exists = this.favorites.some((favorite) => favorite.id === show.id);\r\n      if (!exists) {\r\n        // Dodanie filmu do ulubionych\r\n        this.favorites.push(show);\r\n        // Zapisanie ulubionych w localStorage\r\n        localStorage.setItem(\"favorites\", JSON.stringify(this.favorites));\r\n        // Zaktualizowanie licznika na serduszku\r\n        const countElement = document.querySelector(\".count span\");\r\n        if (countElement) {\r\n          countElement.textContent =\r\n            parseInt(countElement.textContent || 0) + 1;\r\n        }\r\n        // Dodanie animacji do ikony serduszka\r\n        const heartIcon = document.querySelector(\".fa-heart\");\r\n        if (heartIcon) {\r\n          heartIcon.classList.add(\"animate__animated\", \"animate__heartBeat\");\r\n          setTimeout(() => {\r\n            heartIcon.classList.remove(\r\n              \"animate__animated\",\r\n              \"animate__heartBeat\"\r\n            );\r\n          }, 10000); // Usunięcie animacji po 10 sekundzie\r\n        }\r\n      }\r\n    },\r\n    // Dodajemy metodę do usuwania filmów z ulubionych\r\n    removeFromFavorites(showId) {\r\n      this.favorites = this.favorites.filter((show) => show.id !== showId);\r\n      localStorage.setItem(\"favorites\", JSON.stringify(this.favorites));\r\n    },\r\n    addToCart(show) {\r\n      // Sprawdzenie, czy dany film już istnieje w koszyku\r\n      const exists = this.cart.some((item) => item.id === show.id);\r\n\r\n      // Domyślna cena dla filmu, gdy cena nie jest dostępna w danych z API\r\n      const defaultPrice = 9.99;\r\n\r\n      if (!exists) {\r\n        // Dodanie ceny do obiektu filmu, jeśli nie jest dostępna w danych z API\r\n        const showWithPrice = { ...show, price: show.price || defaultPrice };\r\n\r\n        // Dodanie filmu do koszyka\r\n        this.cart.push(showWithPrice);\r\n\r\n        // Zapisanie koszyka w localStorage\r\n        localStorage.setItem(\"cart\", JSON.stringify(this.cart));\r\n      }\r\n    },\r\n    removeFromCart(showId) {\r\n      this.cart = this.cart.filter((item) => item.id !== showId);\r\n      localStorage.setItem(\"cart\", JSON.stringify(this.cart));\r\n    },\r\n    filterFilms(category) {\r\n      this.selectedCategory = category;\r\n      this.displayedGenres =\r\n        category === \"All\" ? this.originalGenres : [category];\r\n    },\r\n    resetCategory() {\r\n      this.selectedCategory = \"All\";\r\n      this.displayedGenres = [\"All\", ...this.originalGenres];\r\n    },\r\n    // Dodajemy funkcję sortowania\r\n    sortShows(option) {\r\n      let sortedShows = [...this.originalAllShows];\r\n      switch (option) {\r\n        case \"oldest\":\r\n          sortedShows.sort(\r\n            (a, b) => new Date(a.premiered) - new Date(b.premiered)\r\n          );\r\n          break;\r\n        case \"newest\":\r\n          sortedShows.sort(\r\n            (a, b) => new Date(b.premiered) - new Date(a.premiered)\r\n          );\r\n          break;\r\n        case \"az\":\r\n          sortedShows.sort((a, b) => a.name.localeCompare(b.name));\r\n          break;\r\n        case \"za\":\r\n          sortedShows.sort((a, b) => b.name.localeCompare(a.name));\r\n          break;\r\n        default:\r\n          // Domyślne sortowanie według kolejności w tablicy\r\n          sortedShows = [...this.allShows];\r\n          break;\r\n      }\r\n      // Przypisujemy posortowane filmy do filteredShows\r\n      this.originalAllShows = sortedShows;\r\n    },\r\n    resetSort() {\r\n      // Resetujemy sortowanie do domyślnego\r\n      this.originalAllShows = [...this.allShows];\r\n    },\r\n    // Metoda do pobierania szczegółowych informacji o wybranym show\r\n    fetchShowDetails(showId) {\r\n      axios\r\n        .get(`https://api.tvmaze.com/shows/${showId}`)\r\n        .then((response) => {\r\n          // Wyświetlanie szczegółowych informacji w modalu\r\n          this.showDetailsModal(response.data);\r\n          this.fetchShowCast(showId); // Dodajemy pobieranie informacji o obsadzie\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching show details:\", error);\r\n        });\r\n    },\r\n    // Metoda wyświetlająca modal z danymi o show\r\n    showDetailsModal(showData) {\r\n      // Ustawianie danych showDetails, które wykorzystamy do wyświetlenia w modalu\r\n      this.showDetails = showData;\r\n      // Pokazanie modala\r\n      $(\"#showDetailsModal\").modal(\"show\");\r\n    },\r\n    fetchShowCast(showId) {\r\n      axios\r\n        .get(`https://api.tvmaze.com/shows/${showId}/cast`)\r\n        .then((response) => {\r\n          this.showCast = response.data;\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching show cast:\", error);\r\n        });\r\n    },\r\n  },\r\n});\r\n\r\napp.mount(\"#app\");\r\n\r\n// zaczynam modyfikacje\r\n\r\n// TOGGLE LOGIN BUTTON\r\ndocument\r\n  .getElementById(\"toggleLoginBtn\")\r\n  .addEventListener(\"click\", function () {\r\n    // Przełączanie klasy show na kontenerze formularza logowania\r\n    document.getElementById(\"loginContainer\").classList.toggle(\"show\");\r\n  });\r\n"],"names":["fetch","then","response","json","response2","console","log","app","Vue","createApp","data","topTenShows","allShows","originalAllShows","currentPage","pageSize","favorites","cart","searchQuery","selectedCategory","filteredAllShows","originalGenres","displayedGenres","showDetails","showCast","computed","paginatedShows","startIndex","filteredShows","slice","totalPages","Math","ceil","length","_this","filtered","filter","show","genres","includes","regex","RegExp","toLowerCase","test","name","genresSet","Set","forEach","genre","add","Array","from","totalPrice","hasPrice","every","item","hasOwnProperty","isNaN","price","error","total","reduce","parseFloat","toFixed","created","fetchTopTenShows","fetchAllShows","favoritesFromStorage","localStorage","getItem","JSON","parse","cartFromStorage","concat","_toConsumableArray","methods","_this2","axios","get","rating","average","sort","a","b","_this3","searchShows","addToFavorites","exists","some","favorite","id","push","setItem","stringify","countElement","document","querySelector","textContent","parseInt","heartIcon","classList","setTimeout","remove","removeFromFavorites","showId","addToCart","defaultPrice","showWithPrice","_objectSpread","removeFromCart","filterFilms","category","resetCategory","sortShows","option","sortedShows","Date","premiered","localeCompare","resetSort","fetchShowDetails","_this4","showDetailsModal","fetchShowCast","showData","$","modal","_this5","mount","getElementById","addEventListener","toggle"],"sourceRoot":""}